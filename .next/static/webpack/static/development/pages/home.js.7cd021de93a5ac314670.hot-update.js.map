{"version":3,"file":"static/webpack/static/development/pages/home.js.7cd021de93a5ac314670.hot-update.js","sources":["webpack:///./redux/redux.js"],"sourcesContent":["import React from \"react\";\nimport { Provider } from \"react-redux\";\nimport { store } from \"./store\";\nimport App from \"next/app\";\n\nexport const withRedux = (PageComponent, { ssr = true } = {}) => {\n  const WithRedux = ({ initialReduxState, ...props }) => {\n    const store = getOrInitializeStore(initialReduxState);\n    return (\n      <Provider store={store}>\n        <PageComponent {...props} />\n      </Provider>\n    );\n  };\n\n  // Make sure people don't use this HOC on _app.js level\n  if (process.env.NODE_ENV !== \"production\") {\n    const isAppHoc =\n      PageComponent === App || PageComponent.prototype instanceof App;\n    if (isAppHoc) {\n      throw new Error(\"The withRedux HOC only works with PageComponents\");\n    }\n  }\n\n  // Set the correct displayName in development\n  if (process.env.NODE_ENV !== \"production\") {\n    const displayName =\n      PageComponent.displayName || PageComponent.name || \"Component\";\n\n    WithRedux.displayName = `withRedux(${displayName})`;\n  }\n\n  if (ssr || PageComponent.getInitialProps) {\n    WithRedux.getInitialProps = async context => {\n      // Get or Create the store with `undefined` as initialState\n      // This allows you to set a custom default initialState\n      const reduxStore = getOrInitializeStore();\n\n      // Provide the store to getInitialProps of pages\n      context.reduxStore = reduxStore;\n\n      // Run getInitialProps from HOCed PageComponent\n      const pageProps =\n        typeof PageComponent.getInitialProps === \"function\"\n          ? await PageComponent.getInitialProps(context)\n          : {};\n\n      // Pass props to PageComponent\n      return {\n        ...pageProps,\n        initialReduxState: reduxStore.getState()\n      };\n    };\n  }\n\n  return WithRedux;\n};\n\nlet reduxStore;\nconst getOrInitializeStore = initialState => {\n  // Always make a new store if server, otherwise state is shared between requests\n  if (typeof window === \"undefined\") {\n    return initializeStore(initialState);\n  }\n\n  // Create store if unavailable on the client and set it on the window object\n  if (!reduxStore) {\n    reduxStore = initializeStore(initialState);\n  }\n\n  return reduxStore;\n};\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AAPA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AASA;AATA;AAiBA;AAjBA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAoBA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA,eAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;A","sourceRoot":""}